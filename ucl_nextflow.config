import java.time.*
Date now = new Date()
def curr_time = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')

manifest {
    name = 'test'
    homePage = 'test'
    description = 'test'
    mainScript = 'main.nf'
    nextflowVersion = '>=19.09.0-edge'
    version = '1.0.0'
}

params {
    patients_inventory = 'data/inventory/inventory_patients_tcga.csv'
    analysis_inventory = 'data/inventory/inventory_analysis_tcga_short.csv'
    blacklist_inventory = 'data/inventory/inventory_blacklist_tcga.csv' //optional 
    // In order to do analysis without black & white lists regions
    // blacklist_inventory = ''

    assets_dir = 'data/assets/'
    target_genome_version = 'hg19'
    target_genome_path = 'data/assets/reference_genome/Homo_sapiens_assembly19.fasta'
    // optional, but required then filtering by local mutation rate is
    // requested (see bin_len below)
    target_genome_chr_len = 'data/assets/reference_genome/Homo_sapiens_assembly19.chrom.sizes'
    chain = 'data/assets/reference_genome/hg38ToHg19.over.chain'

    min_depth = 30
    min_tumor_vac = 10
    min_tumor_vaf = 5
    max_germline_vaf = 1
    max_germline_vac = 5
    max_n_vars = 90000

    ignore_strand = 'T'
    min_reg_len = 5

    // optional
    gene_name_synonyms = 'data/assets/gene_names_synonyms/hgnc_complete_set_2022-07-01_proc.csv'
    // optional, set it to -1 to switch off filtering based on local mutation rate
    bin_len = 50000 
    // optional, set it to 'F' to switch off filtering based on synonymous mutation rate (CDS only)
    calc_synonymous = 'T'
    cdsAcceptedClass = 'Frame_Shift_Del Frame_Shift_Ins In_Frame_Del In_Frame_Ins Missense_Mutation Nonsense_Mutation Silent Translation_Start_Site Nonstop_Mutation De_novo_Start_InFrame De_novo_Start_OutOfFrame Unknown'
    ncAcceptedClass = "3primeUTR 3primeFlank 5primeUTR 5primeFlank IGR Intron RNA Targeted_Region Splice_Site Unknown"
    // optional, set to '' to not use
    varanno_conversion_table = 'data/assets/variantAnnotation_to_annovar_conversion.txt' 
    annotation_failed_code = 'Unknown'

    nbr_regions_neutralbins_file = 'data/assets/NBR/Neutral_regions_within_100kb_bins_hg19.txt'
    nbr_trinucfreq_neutralbins_file = 'data/assets/NBR/Trinucfreqs_within_100kb_bins_hg19.txt'
    nbr_driver_regs_file = 'data/assets/NBR/GRanges_driver_regions_hg19.txt'

    mutpanning_java_memory=16G

    oncodrivefml_config = 'data/assets/config/oncodrivefml_hg19.config'

    output = 'TEST/'

    timestamp = now.format("yyyyMMdd-HH-mm-ss")
    today = now.format("yyyyMMdd")
}

singularity {
  enabled = true
  autoMounts = true
}

process {
    withName:check_inventories {
        maxForks = 1
        container = 'library://marialitovchenko/noncoding_driver_pipeline/r_packages.sif:latest'
    }

    withName:create_input_mutation_files {
        container = 'library://marialitovchenko/noncoding_driver_pipeline/r_packages.sif:latest'
    }

    withName:create_input_genomic_regions_files {
        container = 'library://marialitovchenko/noncoding_driver_pipeline/r_packages.sif:latest'
    }

    withName:calculate_mutation_rates {
        maxForks = 1
        container = 'library://marialitovchenko/noncoding_driver_pipeline/r_packages.sif:latest'
    }

    withName:mutpanning {
        container = 'library://marialitovchenko/default/mutpanning_v2:sha256.f64d2965476fa8602254eb8e7dfe8ac2b4f87da6ef25f3b167c61d411d8efa7c'
    }

    withName:nbr {
        maxForks = 1
        container = 'library://marialitovchenko/noncoding_driver_pipeline/r_packages.sif:latest'
    }
}


profiles {
    singularity.enabled = true
    singularity.autoMounts = true
    // the default is 20 minutes and fails with large images
    singularity.pullTimeout = "3 hours"

    standard {
        process.executor = 'local'
        process.memory = '4G'
        process.cpus = '2'
    }

    ucl_cs_cluster {
        process.executor = 'SGE'
        
        executor.queueSize = 50
        executor.submitRateLimit = '50/1min'

        singularity.runOptions = "--bind ${PWD}"
        
        process {
            withName:check_inventories {
                clusterOptions = '-S /bin/bash -cwd -l h_rt=01:00:00,h_vmem=1G,tmem=1G'
            }

            withName:create_input_mutation_files {
                cpus = 2
                penv = 'smp'
                clusterOptions = '-S /bin/bash -cwd -l h_rt=01:00:00,h_vmem=4G,tmem=4G -pe smp 2'
            }

            withName:create_input_genomic_regions_files {
                cpus = 2
                penv = 'smp'
                clusterOptions = '-S /bin/bash -cwd -l h_rt=04:00:00,h_vmem=10G,tmem=10G -pe smp 2'
            }

            withName:calculate_mutation_rates {
                clusterOptions = '-S /bin/bash -cwd -l h_rt=02:00:00,h_vmem=16G,tmem=16G'
            }

            withName:mutpanning {
                clusterOptions = '-S /bin/bash -cwd -l h_rt=01:00:00,h_vmem=32G,tmem=32G'
            }

            withName:nbr {
                clusterOptions = '-S /bin/bash -cwd -l h_rt=12:00:00,h_vmem=8G,tmem=8G'
            }

            withName: oncodrivefml {
                // in case you change number of cores here, do not forget to
                // change it in oncodrivefml config file too
                cpus = 4
                penv = 'smp'
                clusterOptions = '-S /bin/bash -cwd -l h_rt=04:00:00,h_vmem=8G,tmem=8G -pe smp 4'

            }
        }
    }
}

report {
    enabled = true
    file = "noncoding_driver_pipeline_report_${curr_time}.html"
    overwrite = false
}


timeline {
    enabled = true
    file = "noncoding_driver_pipeline_timeline_${curr_time}.html"
    overwrite = false
}
