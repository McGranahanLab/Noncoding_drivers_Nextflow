import java.time.*
Date now = new Date()
def curr_time = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')

manifest {
    name = 'test'
    homePage = 'test'
    description = 'test'
    mainScript = 'main.nf'
    nextflowVersion = '>=19.09.0-edge'
    version = '1.0.0'
}

params {
    timestamp = now.format("yyyyMMdd-HH-mm-ss")
    today = now.format("yyyyMMdd")

    //patients_inventory             = 'data/inventory/inventory_patients_tcga.csv'
    patients_inventory             = 'data/inventory/inventory_patients.csv'
    //analysis_inventory             = 'data/inventory/inventory_analysis_tcga_short.csv'
    analysis_inventory             = 'data/inventory/inventory_analysis.csv'
    //blacklist_inventory            = 'data/inventory/inventory_blacklist_tcga.csv' //optional 
    blacklist_inventory            = 'data/inventory/inventory_blacklist.csv' //optional 
 
    // In order to do analysis without black & white lists regions
    // blacklist_inventory = ''
    // required if digdriver run is requested, otherwise, set to ''
    digdriver_models_inventory     = 'data/inventory/inventory_digdriver_models.csv'
    chasmplus_annotators_inventory = 'data/inventory/inventory_chasmplus_annotator.csv'

    target_genome_version = 'hg19'
    // path to refernce genome fasta are in profiles

    min_depth        = 30
    min_tumor_vac    = 10
    min_tumor_vaf    = 5
    max_germline_vaf = 1
    max_germline_vac = 5
    max_n_vars       = 90000

    ignore_strand = 'T'
    min_reg_len   = 5

    // optional
    gene_name_synonyms       = 'data/assets/hgnc_complete_set_processed.csv'
    // optional, set it to -1 to switch off filtering based on local mutation rate
    bin_len                  = 50000 
    // optional, set it to 'F' to switch off filtering based on synonymous mutation rate (CDS only)
    calc_synonymous          = 'T'
    remove_synon_from_coding = 'T'
    cdsAcceptedClass         = 'Frame_Shift_Del Frame_Shift_Ins In_Frame_Del In_Frame_Ins Missense_Mutation Nonsense_Mutation Silent Translation_Start_Site Nonstop_Mutation De_novo_Start_InFrame De_novo_Start_OutOfFrame Unknown'
    synAcceptedClass         = 'Silent'
    ncAcceptedClass          = "3primeUTR 3primeFlank 5primeUTR 5primeFlank IGR Intron RNA Targeted_Region Splice_Site Unknown"
    // optional, set to '' to not use
    varanno_conversion_table = 'data/assets/variantAnnotation_to_annovar_conversion.txt' 
    annotation_failed_code   = 'Unknown'

    digdriver_elements = 'data/assets/DIGdriver/element_data.h5'

    nbr_regions_neutralbins_file    = 'data/assets/NBR/Neutral_regions_within_100kb_bins_hg19.txt'
    nbr_trinucfreq_neutralbins_file = 'data/assets/NBR/Trinucfreqs_within_100kb_bins_hg19.txt'
    nbr_driver_regs_file            = 'data/assets/NBR/GRanges_driver_regions_hg19.txt'

    oncodrivefml_config = 'conf/oncodrivefml_hg19.config'

    outdir = 'completed_runs/2023_12_25/'

    chasmplus_container    = 'marialitovchenko/noncoding_driver_pipeline:chasmplus'
    digdriver_container    = 'marialitovchenko/noncoding_driver_pipeline:digdriver'
    mutpanning_container   = 'marialitovchenko/noncoding_driver_pipeline:mutpanning'
    oncodrivefml_container = 'marialitovchenko/noncoding_driver_pipeline:oncodrivefml'
    r_container            = 'marialitovchenko/noncoding_driver_pipeline:r_packages'

    /* ------------------------------------------------------------------------
                    POSTPROCESSING only parameters 
    -------------------------------------------------------------------------*/
    known_cancer_genes = 'data/assets/cgc_knownCancerGenes.csv'
    olfactory_genes    = 'data/assets/olfactory_barnes_2020.csv'
    rawP_cap           = '1e-8'
    gtex_inventory     = 'data/inventory/inventory_expression_gtex.csv'
    tcga_inventory     = 'data/inventory/inventory_expression_tcga.csv'
    gtex_expression    = 'data/assets/GTEx_expression.csv' 
    tcga_expression    = 'data/assets/TCGA_expression.csv'
    combine_p_method   = 'brown'
    tier_inventory     = 'data/inventory/inventory_tier_definition.csv'

    min_n_soft_cod          = 3    // put to 0 to disable
    min_n_soft_noncod       = 2    // put to 0 to disable
    min_n_muts              = 3    // put to 0 to disable
    min_n_patients          = 3    // put to 0 to disable
    //max_local_mut_rate_q    = 1    // put to 1 to disable
    max_local_mut_rate_q    = 0.95 // put to 1 to disable
    //max_gr_mut_rate_q       = 0.99    // put to 1 to enable
    max_gr_mut_rate_q       = 1    // put to 1 to enable
    //max_gr_syn_mut_rate_q   = 0.99    // put to 1 to enable
    max_gr_syn_mut_rate_q   = 1    // put to 1 to enable
    max_gr_len_q            = 0.99 // put to 1 to disable
    remove_olfactory        = 'T'  // put to 'F' to disable

    min_gapwidt                   = 1000
    min_width                     = 1000
    amp                           = 1
    gain                          = 0.3219281
    loss                          = -0.4150375
    exclude_silent_from_biotyping = 'T'

    min_biotype_muts_patients = 5
    min_biotype_cna_patients  = 10
    weak_tsg                  = 0.33
    tsg                       = 0.50
    weak_og                   = 0.33
    og                        = 0.50

    chasm_score_min           = 0.5
    chasm_padj                = 0.05
    max_fp                    = 0.05
    // extra exclude_silent_from_biotyping?
    known_driver_mutations    = 'data/assets/CancerGenomeInterpreter_lung_hg19.tsv'

    subtype_spec_pval         = 0.05 

    fold_splicesites_in_coding = 'T'
    min_patients_discover      = 10
    specificity_mode           = "specific"
}

singularity {
    enabled = true
    autoMounts = true
    pullTimeout = "3 hours"
    cacheDir = 'singularity_images/'
}

process {
    withName: check_inventories {
        maxForks = 1
    }

    withName: 'FILTER.*|CREATE_RDA.*' {
        publishDir = [[ path: { "$params.outdir/inputs/" }, pattern: "*.{maf,bed,Rda}", 
                        mode: 'link', overwrite: 'true' ], 
                      [ path: { "$params.outdir/inputs/" }, pattern: "hypermutated*", 
                        mode: 'link', overwrite: 'true' ],
                      [ path: { "$params.outdir/logs/" }, pattern: "*.{out,err}", 
                        mode: 'link', overwrite: 'true' ]]
    }

    withName: 'WRITE.*' {
        publishDir = [[ path: { "$params.outdir/inputs/$software/" }, 
                        pattern: "{inputGR,inputMutations,patientsInv}*" , 
                        mode: 'link', overwrite: 'true' ]]
    }

    withName: 'CALCULATE_MUTATION_RATE.*' {
        publishDir = [[ path: { "$params.outdir/results/mut_rates/" }, pattern: "*.csv",
                        mode: 'link', overwrite: 'true'],
                      [ path: { "$params.outdir/logs/mut_rates/" }, pattern: "*.{out,err}", 
                        mode: 'link', overwrite: 'true' ]]
    }

    withName: 'CHASM.*|DIGDRIVE.*|DNDS.*|MUTPAN.*|NBR.*|ONCODRIVE.*|.*DISCOVER' {
        publishDir = [[ path: { "$params.outdir/results/$software/" }, pattern: "*Results-*",
                        mode: 'link', overwrite: 'true'],
                      [ path: { "$params.outdir/logs/$software/" }, pattern: "*.{out,err}", 
                        mode: 'link', overwrite: 'true' ]]
    }

    withName: 'COMBINE_P.*' {
        publishDir = [[ path: {"$params.outdir/results/tables/combined_p_values/" }, pattern: "combinedP-*",
                        mode: 'link', overwrite: 'true'],
                      [ path: { "$params.outdir/logs/postproc_combine_p/" }, pattern: "*.{out,err}", 
                        mode: 'link', overwrite: 'true' ]]
    }

    withName: 'ASSIGN_.*' {
        publishDir = [[ path: {"$params.outdir/results/tables/tiered_drivers/"}, pattern: "assignedTier-*",
                        mode: 'link', overwrite: 'true'],
                      [ path: { "$params.outdir/logs/postproc_tiered_drivers/" }, pattern: "*.{out,err}", 
                        mode: 'link', overwrite: 'true' ]]
    }

    withName: 'FILTER_TIERED_.*' {
        publishDir = [[ path: {"$params.outdir/results/tables/drivers/"}, pattern: "drivers-*",
                        mode: 'link', overwrite: 'true'],
                      [ path: { "$params.outdir/logs/postproc_filter_tiered_drivers/" }, pattern: "*.{out,err}", 
                        mode: 'link', overwrite: 'true' ]]
    }

    withName: 'ANNOTATE_GENOMICRANGES.*|ANNOTATE_MUTATIONS.*' {
        publishDir = [[ path: {"$params.outdir/results/tables/drivers_cn_multiplicity_annotated/"}, pattern: "driversAnnotate*",
                        mode: 'link', overwrite: 'true'],
                      [ path: { "$params.outdir/logs/postproc_cn_multiplicity_annotation/" }, pattern: "*.{out,err}", 
                        mode: 'link', overwrite: 'true' ]]
    }

    withName: 'BIOTYPE_.*' {
        publishDir = [[ path: {"$params.outdir/results/tables/drivers_biotyped/"}, pattern: "driversBiotyped*",
                        mode: 'link', overwrite: 'true'],
                      [ path: { "$params.outdir/logs/postproc_drivers_biotyped/" }, pattern: "*.{out,err}", 
                        mode: 'link', overwrite: 'true' ]]
    }

    withName: 'FIND_DRIVER_MUT.*' {
        publishDir = [[ path: {"$params.outdir/results/tables/driver_mutations/"}, pattern: "driverMutations*",
                        mode: 'link', overwrite: 'true'],
                      [ path: { "$params.outdir/logs/postproc_drivers_mutations/" }, pattern: "*.{out,err}", 
                        mode: 'link', overwrite: 'true' ]]
    }

    withName: 'CALCULATE_SELECTION_.*' {
        publishDir = [[ path: {"$params.outdir/results/tables/selection_rates/"}, pattern: "selectionRates*",
                        mode: 'link', overwrite: 'true'],
                      [ path: { "$params.outdir/logs/postproc_selection_rates/" }, pattern: "*.{out,err}", 
                        mode: 'link', overwrite: 'true' ]]
    }

    withName: '.*SUBTYPE_SPECIFICITY.*' {
        publishDir = [[ path: {"$params.outdir/results/tables/subtype_specificity/"}, pattern: "subtypeSpecificity*",
                        mode: 'link', overwrite: 'true'],
                      [ path: { "$params.outdir/logs/postproc_subtype_specificity/" }, pattern: "*.{out,err}", 
                        mode: 'link', overwrite: 'true' ]]
    }
}

profiles {
    genomicsEngland {includeConfig 'conf/genomicsEngland.config'}
    local {includeConfig 'conf/local.config'}
}

report {
    enabled = true
    file = "noncoding_driver_pipeline_report_${curr_time}.html"
    overwrite = false
}

timeline {
    enabled = true
    file = "noncoding_driver_pipeline_timeline_${curr_time}.html"
    overwrite = false
}