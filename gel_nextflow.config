import java.time.*
Date now = new Date()
def curr_time = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')

manifest {
    name = 'test'
    homePage = 'test'
    description = 'test'
    mainScript = 'main.nf'
    nextflowVersion = '>=19.09.0-edge'
    version = '1.0.0'
}

params {
    patients_inventory = 'data/inventory/inventory_patients.csv'
    analysis_inventory = 'data/inventory/inventory_analysis.csv'
    blacklist_inventory = 'data/inventory/inventory_blacklist.csv' //optional 
    // In order to do analysis without black & white lists regions
    // blacklist_inventory = ''
    // required if digdriver run is requested, otherwise, set to ''
    digdriver_models_inventory = 'data/inventory/inventory_digdriver_models.csv'

    target_genome_version = 'hg19'
    target_genome_path = 'data/assets/reference_genome/hg19.fa'
    // optional, but required then filtering by local mutation rate is
    // requested (see bin_len below)
    target_genome_chr_len = 'data/assets/reference_genome/hg19.chrom.sizes.bed'
    chain = 'data/assets/reference_genome/hg38ToHg19.over.chain'

    min_depth = 30
    min_tumor_vac = 10
    min_tumor_vaf = 5
    max_germline_vaf = 1
    max_germline_vac = 5
    max_n_vars = 90000

    ignore_strand = 'T'
    min_reg_len = 5

    // optional
    gene_name_synonyms = 'data/assets/gene_names_synonyms/hgnc_complete_set_2022-07-01_proc.csv'
    // optional, set it to -1 to switch off filtering based on local mutation rate
    bin_len = 50000 
    // optional, set it to 'F' to switch off filtering based on synonymous mutation rate (CDS only)
    calc_synonymous = 'T'
    cdsAcceptedClass = 'Frame_Shift_Del Frame_Shift_Ins In_Frame_Del In_Frame_Ins Missense_Mutation Nonsense_Mutation Silent Translation_Start_Site Nonstop_Mutation De_novo_Start_InFrame De_novo_Start_OutOfFrame Unknown'
    ncAcceptedClass = "3primeUTR 3primeFlank 5primeUTR 5primeFlank IGR Intron RNA Targeted_Region Splice_Site Unknown"
    // optional, set to '' to not use
    varanno_conversion_table = 'data/assets/variantAnnotation_to_annovar_conversion.txt' 
    annotation_failed_code = 'Unknown'

    digdriver_elements = 'data/assets/DIGdriver/element_data.h5'

    mutpanning_java_memory='150G'

    nbr_regions_neutralbins_file = 'data/assets/NBR/Neutral_regions_within_100kb_bins_hg19.txt'
    nbr_trinucfreq_neutralbins_file = 'data/assets/NBR/Trinucfreqs_within_100kb_bins_hg19.txt'
    nbr_driver_regs_file = 'data/assets/NBR/GRanges_driver_regions_hg19.txt'

    oncodrivefml_config = 'config/oncodrivefml_hg19.config'

    outdir = 'results/'

    timestamp = now.format("yyyyMMdd-HH-mm-ss")
    today = now.format("yyyyMMdd")
}

singularity {
    enabled = true
    autoMounts = true
    runOptions = "--bind ${PWD}"
}

process {
    withName: check_inventories {
        maxForks = 1
        container = 'library://marialitovchenko/noncoding_driver_pipeline/r_packages.sif:latest'
    }

    withName: 'filter.*|write.*' {
        container = 'library://marialitovchenko/noncoding_driver_pipeline/r_packages.sif:latest'
        publishDir = [[ path: { "$params.outdir/inputs/" }, pattern: "*.maf", 
                        mode: 'symlink', overwrite: 'true' ],
                      [ path: { "$params.outdir/inputs/" }, pattern: "hypermutated*", 
                        mode: 'symlink', overwrite: 'true' ],
                      [ path: { "$params.outdir/inputs/chasmplus/" }, pattern: "*chasmplus*", 
                        mode: 'symlink', overwrite: 'true' ],
                      [ path: { "$params.outdir/inputs/digdriver/" }, pattern: "*digdriver*", 
                        mode: 'symlink', overwrite: 'true' ],
                      [ path: { "$params.outdir/inputs/dndscv/" }, pattern: "*dndscv*", 
                        mode: 'symlink', overwrite: 'true' ],
                      [ path: { "$params.outdir/inputs/mutpanning/" }, pattern: "*mutpanning*", 
                        mode: 'symlink', overwrite: 'true' ],
                      [ path: { "$params.outdir/inputs/nbr/" }, pattern: "*nbr*", 
                        mode: 'symlink', overwrite: 'true' ],
                      [ path: { "$params.outdir/inputs/oncodrivefml/" }, pattern: "*oncodrivefml*", 
                        mode: 'symlink', overwrite: 'true' ],
                      [ path: { "$params.outdir/inputs/" }, pattern: "*.bed", 
                        mode: 'symlink', overwrite: 'true' ],
                      [ path: { "$params.outdir/logs/" }, pattern: "*.out", 
                        mode: 'copy', overwrite: 'true' ],
                      [ path: { "$params.outdir/logs/" }, pattern: "*.err",
                        mode: 'copy', overwrite: 'true'  ]]
    }

    withName: 'create_rda_for_dndscv_digdriver' {
        container = 'library://marialitovchenko/noncoding_driver_pipeline/r_packages.sif:latest'
        publishDir = [[ path: { "$params.outdir/inputs/" }, pattern: "*.Rda", 
                        mode: 'symlink', overwrite: 'true'],
                      [ path: { "$params.outdir/logs/" }, pattern: "*.out",
                        mode: 'symlink', overwrite: 'true'],
                      [ path: { "$params.outdir/logs/" }, pattern: "*.err",
                        mode: 'symlink', overwrite: 'true']]
    }

    withName:digdriver {
        container = 'library://marialitovchenko/noncoding_driver_pipeline/digdriver.sif:latest'
        publishDir = [[ path: { "$params.outdir/results/" }, pattern: "digdriver_results*", 
                        mode: 'symlink', overwrite: 'true'],
                      [ path: { "$params.outdir/logs/" }, pattern: "*.out",
                        mode: 'symlink', overwrite: 'true'],
                      [ path: { "$params.outdir/logs/" }, pattern: "*.err",
                        mode: 'symlink', overwrite: 'true']]
    }

    withName:dndscv {
        container = 'library://marialitovchenko/noncoding_driver_pipeline/dndscv_indel.sif:latest'
        publishDir = [[ path: { "$params.outdir/results/" }, pattern: "dndscv_results*", 
                        mode: 'symlink', overwrite: 'true'],
                      [ path: { "$params.outdir/logs/" }, pattern: "*.out",
                        mode: 'symlink', overwrite: 'true'],
                      [ path: { "$params.outdir/logs/" }, pattern: "*.err",
                        mode: 'symlink', overwrite: 'true']]
    }

    withName:mutpanning {
        container = 'library://marialitovchenko/noncoding_driver_pipeline/mutpanning_v2.sif:latest'
        publishDir = [[ path: { "$params.outdir/results/" }, pattern: "mutpanning_results*", 
                        mode: 'symlink', overwrite: 'true'],
                      [ path: { "$params.outdir/logs/" }, pattern: "*.out",
                        mode: 'symlink', overwrite: 'true'],
                      [ path: { "$params.outdir/logs/" }, pattern: "*.err",
                        mode: 'symlink', overwrite: 'true']]
    }

    withName:nbr {
        maxForks = 1
        container = 'library://marialitovchenko/noncoding_driver_pipeline/r_packages.sif:latest'
        publishDir = [[ path: { "$params.outdir/results/" }, pattern: "nbr_results*", 
                        mode: 'symlink', overwrite: 'true'],
                      [ path: { "$params.outdir/logs/" }, pattern: "*.out",
                        mode: 'symlink', overwrite: 'true'],
                      [ path: { "$params.outdir/logs/" }, pattern: "*.err",
                        mode: 'symlink', overwrite: 'true']]
    }

    withName: 'oncodrive.*' {
        container = 'library://marialitovchenko/noncoding_driver_pipeline/oncodrivefml.sif:latest'
        publishDir = [[ path: { "$params.outdir/results/" }, pattern: "oncodrivefml_results*", 
                        mode: 'symlink', overwrite: 'true'],
                      [ path: { "$params.outdir/logs/" }, pattern: "*.out",
                        mode: 'symlink', overwrite: 'true'],
                      [ path: { "$params.outdir/logs/" }, pattern: "*.err",
                        mode: 'symlink', overwrite: 'true']]
    }
}


profiles {
    singularity.enabled = true
    singularity.autoMounts = true
    // the default is 20 minutes and fails with large images
    singularity.pullTimeout = "3 hours"

    standard {
        process.executor = 'local'
        process.memory = '4G'
        process.cpus = '2'
    }

    helix_on_gel {
        executor {
            name = 'LSF'
            queueSize = 1000
            submitRateLimit = '100/1min'
        }
        
        process {
            withName:check_inventories {
                executor = 'local'
                cpus = 1
                memory = { 1.GB * task.attempt }
                time = { 10.min * task.attempt }
                errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
                maxRetries = 3
            }

            withName:filter_input_mutations {
                cpus = 2
                penv = 'smp'
                memory = { 4.GB * task.attempt }
                time = { 1.hour * task.attempt }
                errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
                maxRetries = 3
            }

            withName:'write.*' {
                executor = 'local'
                cpus = 1
                memory = { 2.GB * task.attempt }
                time = { 20.min * task.attempt }
                errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
                maxRetries = 5
            }

            withName:filter_genomic_regions {
                cpus = 2
                penv = 'smp'
                memory = { 10.GB * task.attempt }
                time = { 4.hour * task.attempt }
                errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
                maxRetries = 3
            }

            withName:create_rda_for_dndscv_digdriver {
                cpus = 2
                penv = 'smp'
                memory = { 4.GB * task.attempt }
                time = { 1.hour * task.attempt }
                errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
                maxRetries = 3
            }

            withName:calculate_mutation_rates {
                cpus = 1
                memory = { 16.GB * task.attempt }
                time = { 2.hour * task.attempt }
                errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
                maxRetries = 3
            }

            withName:digdriver {
                cpus = 1
                memory = { 8.GB * task.attempt }
                time = { 4.hour * task.attempt }
                errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'ignore' }
                maxRetries = 3
            }

            withName:nbr {
                cpus = 1
                memory = { 8.GB * task.attempt }
                time = { 4.hour * task.attempt }
                errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'ignore' }
                maxRetries = 3
            }

            withName:mutpanning {
                cpus = 1
                memory = { 32.GB * task.attempt }
                time = { 1.hour * task.attempt }
                errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'ignore' }
                maxRetries = 3
            }

            withName: 'oncodrive.*' {
                // in case you change number of cores here, do not forget to
                // change it in oncodrivefml config file too
                cpus = 4
                penv = 'smp'
                memory = { 8.GB * task.attempt }
                time = { 4.hour * task.attempt }
                errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'ignore' }
                maxRetries = 3
            }
        }
    }
}

report {
    enabled = true
    file = "noncoding_driver_pipeline_report_${curr_time}.html"
    overwrite = false
}


timeline {
    enabled = true
    file = "noncoding_driver_pipeline_timeline_${curr_time}.html"
    overwrite = false
}
