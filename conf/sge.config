params {
    target_genome_path = 'data/assets/reference_genome/Homo_sapiens_assembly19.fasta'
    // optional, but required then filtering by local mutation rate is
    // requested (see bin_len below)
    target_genome_chr_len = 'data/assets/reference_genome/Homo_sapiens_assembly19.chrom.sizes.bed'
    chain = 'data/assets/reference_genome/hg38ToHg19.over.chain'

    mutpanning_java_memory='16G'
}

executor {
    name = 'sge'
    queueSize = 100
    submitRateLimit = '100/1min'
}

singularity {
    runOptions = "--bind ${PWD}"
}

process {
    withName:check_inventories {
        container = params.r_container
        executor = 'local'
    }

    withName:filter_input_mutations {
        cpus = 4
        penv = 'smp'
        memory = { 32.GB * task.attempt }
        time = { 1.hour * task.attempt }
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }

    withName:'write_mutations.*' {
        cpus = 1
        memory = { 2.GB * task.attempt }
        time = { 20.min * task.attempt }
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 5
    }

    withName:filter_genomic_regions {
        cpus = 2
        penv = 'smp'
        memory = { 10.GB * task.attempt }
        time = { 1.hour * task.attempt }
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }

    withName:'write_regions.*' {
        cpus = 1
        memory = { 1.GB * task.attempt }
        time = { 30.min * task.attempt }
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 5
    }

    withName:create_rda_for_dndscv_digdriver {
        cpus = 2
        penv = 'smp'
        memory = { 32.GB * task.attempt }
        time = { 1.hour * task.attempt }
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }

    withName:calculate_mutation_rates {
        cpus = 1
        memory = { 16.GB * task.attempt }
        time = { 2.hour * task.attempt }
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }

    withName:digdriver {
        cpus = 1
        memory = { 8.GB * task.attempt }
        time = { 4.hour * task.attempt }
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'ignore' }
        maxRetries = 3
    }

    withName:nbr {
        cpus = 1
        memory = { 8.GB * task.attempt }
        time = { 4.hour * task.attempt }
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'ignore' }
        maxRetries = 3
    }

    withName:mutpanning {
        cpus = 1
        memory = { 32.GB * task.attempt }
        time = { 1.hour * task.attempt }
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'ignore' }
        maxRetries = 3
    }

    withName: 'oncodrive.*' {
        // in case you change number of cores here, do not forget to
        // change it in oncodrivefml config file too
        cpus = 4
        penv = 'smp'
        memory = { 8.GB * task.attempt }
        time = { 4.hour * task.attempt }
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'ignore' }
        maxRetries = 3
    }
}
